{"version":3,"sources":["App.js","index.js"],"names":["App","useState","calc","setCalc","result","setresult","ops","updateCalc","value","includes","slice","eval","toString","createDigits","digits","i","push","onClick","calculate","deleteLast","className","ReactDOM","render","document","getElementById"],"mappings":"ktBAGA,SAASA,MACP,cAAwBC,oDAAS,IAAjC,+LAAOC,KAAP,cAAaC,QAAb,cACA,WAA4BF,oDAAS,IAArC,gMAAOG,OAAP,cAAeC,UAAf,cAEMC,IAAM,CAAC,IAAK,IAAK,IAAK,IAAK,KAE3BC,WAAa,SAAbA,WAAaC,OAGfF,IAAIG,SAASD,QAAmB,KAATN,MAAeI,IAAIG,SAASD,QAAUF,IAAIG,SAASP,KAAKQ,OAAO,MAIxFP,QAAQD,KAAOM,OAKVF,IAAIG,SAASD,QAChBH,UAAUM,KAAKT,KAAOM,OAAOI,cAI3BC,aAAe,WAGnB,IAFA,IAAMC,EAAS,GADU,WAGhBC,GACPD,EAAOE,KACL,qEAAgBC,QAAS,kBAAMV,WAAWQ,EAAEH,aAA5C,SAA0DG,GAA7CA,KAFRA,EAAI,EAAGA,EAAI,GAAIA,IAAK,EAApBA,GAMT,OAAOD,GAIHI,UAAY,SAAZA,YACJf,QAAQQ,KAAKT,MAAMU,aAGfO,WAAa,WACjB,GAAW,IAARjB,KAAH,CAIE,IAAMM,EAAQN,KAAKQ,MAAM,GAAI,GAE7BP,QAAQK,KAIZ,OACE,kEAAKY,UAAU,MAAf,SACC,mEAAKA,UAAU,aAAf,UACE,mEAAKA,UAAU,UAAf,UACIhB,OAAS,kFAAQA,OAAR,OAA0B,GADvC,IAC4CF,MAAQ,OAGpD,mEAAKkB,UAAU,YAAf,UACE,qEAAQH,QAAS,kBAAMV,WAAW,MAAlC,eACA,qEAAQU,QAAS,kBAAMV,WAAW,MAAlC,eACA,qEAAQU,QAAS,kBAAMV,WAAW,MAAlC,eACA,qEAAQU,QAAS,kBAAMV,WAAW,MAAlC,eAEA,qEAAQU,QAASE,WAAjB,oBAGD,mEAAKC,UAAU,SAAf,UACIP,eACF,qEAAQI,QAAS,kBAAMV,WAAW,MAAlC,eACA,qEAAQU,QAAS,kBAAMV,WAAW,MAAlC,eAEA,qEAAQU,QAASC,UAAjB,uBAQKlB,2B,+BCnFf,sDAKAqB,IAASC,OACL,cAAC,IAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.512e1534.chunk.js","sourcesContent":["import { useState } from 'react'\n\n\nfunction App() {\n  const [calc, setCalc] = useState('')\n  const [result, setresult] = useState('')\n\n  const ops = ['/', '*', '+', '-', '.']\n\n  const updateCalc = value => {\n    // if the last value is op and calc is nothing, or op and last is op  then return and do nothing\n    if(\n      ops.includes(value) && calc === '' || ops.includes(value) && ops.includes(calc.slice(-1))\n    ){\n      return;\n    }\n    setCalc(calc + value)\n\n    //update result\n\n    // if last item is not operator\n    if (!ops.includes(value)){\n      setresult(eval(calc + value).toString());\n    }\n  }\n\n  const createDigits = () => {\n    const digits = []; \n\n    for (let i = 1; i < 10; i++){\n      digits.push(\n        <button key={i} onClick={() => updateCalc(i.toString())}>{i}</button>\n      )\n    }\n\n    return digits\n  }\n\n  //by the time this happens calc is already updated and we just need to turn it into string\n  const calculate = () => {\n    setCalc(eval(calc).toString())\n  }\n\n  const deleteLast = () => {\n    if(calc == ''){\n      return\n    }\n    else{\n      const value = calc.slice(0, -1)\n\n      setCalc(value)\n    }\n  }\n\n  return (\n    <div className=\"App\">\n     <div className=\"calculator\">\n       <div className=\"display\">\n         { result ? <span>({result})</span> : ''} {calc || '0'}\n       </div>\n\n       <div className=\"operators\">\n         <button onClick={() => updateCalc('/')}>/</button>\n         <button onClick={() => updateCalc('*')}>*</button>\n         <button onClick={() => updateCalc('+')}>+</button>\n         <button onClick={() => updateCalc('-')}>-</button>\n\n         <button onClick={deleteLast}>DEL</button>\n       </div>\n\n        <div className=\"digits\">\n          { createDigits() }\n          <button onClick={() => updateCalc('0')}>0</button>\n          <button onClick={() => updateCalc('.')}>.</button>\n\n          <button onClick={calculate}>=</button>\n        </div>\n\n     </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <App />, \n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}